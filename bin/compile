#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

VENDOR_DIR="$BUILD_DIR/vendor"
BUILD_CACHE_DIR="$CACHE_DIR/vendor"
EXPORT_SCRIPT="$PWD/export"
PROFILE_DIR="$BUILD_DIR/.profile.d"
PROFILE_SCRIPT="$PROFILE_DIR/omniref.sh"

mkdir -p $PROFILE_DIR
mkdir -p $VENDOR_DIR
mkdir -p $BUILD_CACHE_DIR

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function set-default-env (){
  echo "export $1=\$$1:/app/vendor/$2" >> $PROFILE_SCRIPT
  echo "export $1=\$$1:/app/vendor/$2" >> $EXPORT_SCRIPT
}

if [ -d "$BUILD_CACHE_DIR/cmake"]; then
    topic "found cached cmake build"
    cp -R "$BUILD_CACHE_DIR/cmake" $VENDOR_DIR
else
    topic "fetching cmake v3.2.3 source from cmake.org"
    curl 'http://www.cmake.org/files/v3.2/cmake-3.2.3.tar.gz' -s -o - | tar -xz -C "$VENDOR_DIR"
    cd "$VENDOR_DIR/cmake-3.2.3" 

    topic "building cmake"
    ./configure --prefix=$BUILD_CACHE_DIR
    make
    make install
    ls -R $BUILD_CACHE_DIR
fi

# FYI we do this and set the export path explicitly because we cannot assume all buildpacks copy this dir over
# We need to also leave the vendor dir repo in place, as the current app vendor gets blown away and replaced with
# what is in the build dir
#cp -R "$VENDOR_DIR/cmake" "/app/vendor/cmake"

#set-default-env PATH "cmake/bin"
#set-default-env LD_LIBRARY_PATH "cmake/lib"
#set-default-env LIBRARY_PATH "cmake/lib"
#set-default-env CPATH "cmake/include"
